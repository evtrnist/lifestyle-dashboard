name: Build & Deploy

on:
  push:
    branches: [ main ]

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}
  TAG: sha-${{ github.sha }}

jobs:
  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate --schema=apps/api/prisma/schema.prisma

      - name: Build all NX projects
        run: npm run build:all

      - name: Set up QEMU for ARM emulation
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push API image (arm64)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.api
          platforms: linux/arm64
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.OWNER }}/lifestyle-api:${{ env.TAG }}

      - name: Build & push Frontend image (arm64)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.front
          platforms: linux/arm64
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.OWNER }}/lifestyle-front:${{ env.TAG }}

  deploy:
    name: Deploy to Raspberry Pi (K3s)
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      KUBECONFIG: ${{ github.workspace }}/kubeconfig
      TAG: sha-${{ github.sha }}
      API_IMAGE: ghcr.io/${{ github.repository_owner }}/lifestyle-api
      FRONT_IMAGE: ghcr.io/${{ github.repository_owner }}/lifestyle-front
    steps:
      - name: Checkout k8s repo (manifests)
        uses: actions/checkout@v4
        with:
          repository: evtrnist/lifestyle-k8s 
          token: ${{ secrets.K8S_REPO_TOKEN }}
          path: k8s
          fetch-depth: 1
          persist-credentials: false

      - name: Fail if ${...} placeholders exist in k8s YAML
        run: '! grep -R "\${" -n k8s || (echo "Remove placeholders like \${OWNER} from k8s repo" && exit 1)'

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: latest

      - name: Setup kustomize
        uses: imranismail/setup-kustomize@v2

      - name: Configure kubeconfig
        run: echo "${{ secrets.RPI_KUBECONFIG }}" | base64 -d > "$KUBECONFIG"

      - name: Connect to Tailscale (for cluster access via tailnet)
        run: |
          curl -fsSL https://tailscale.com/install.sh | sh
          sudo tailscale up --authkey ${{ secrets.TAILSCALE_CI_KEY }} --hostname=ci-runner-${{ github.run_id }}

      - name: Set images and apply with kustomize
        working-directory: k8s/base
        run: |
          cp -R . ../tmp && cd ../tmp
          kustomize edit set image ${API_IMAGE}=${API_IMAGE}:${TAG}
          kustomize edit set image ${FRONT_IMAGE}=${FRONT_IMAGE}:${TAG}
          kubectl apply -k .
          kubectl rollout status deploy/lifestyle-api --timeout=180s
          kubectl rollout status deploy/lifestyle-front --timeout=180s
